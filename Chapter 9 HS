module Main where

-------------------------------------------------------------
-- HC9T1: Define a Parametric Type Synonym
-------------------------------------------------------------
type Entity a = (String, a)
-- Example: Entity Int could be ("Address", 42)


-------------------------------------------------------------
-- HC9T2: Implement a Parametric Data Type
-------------------------------------------------------------
data Box a = Empty | Has a deriving Show


-------------------------------------------------------------
-- HC9T3: Function to Add Values in a Box
-------------------------------------------------------------
addN :: Num a => a -> Box a -> Box a
addN n Empty    = Empty
addN n (Has x)  = Has (x + n)


-------------------------------------------------------------
-- HC9T4: Extract a Value from a Box
-------------------------------------------------------------
extract :: a -> Box a -> a
extract defaultVal Empty   = defaultVal
extract _ (Has x)          = x


-------------------------------------------------------------
-- HC9T5: Parametric Data Type with Record Syntax
-------------------------------------------------------------
data Shape a
  = Circle { color :: a, radius :: Float }
  | Rectangle { color :: a, width :: Float, height :: Float }
  deriving Show

circle1 :: Shape String
circle1 = Circle { color = "Red", radius = 5.0 }

rectangle1 :: Shape String
rectangle1 = Rectangle { color = "Blue", width = 10.0, height = 5.0 }


-------------------------------------------------------------
-- HC9T6: Recursive Data Type for Tweets
-------------------------------------------------------------
data Tweet = Tweet
  { content  :: String
  , likes    :: Int
  , comments :: [Tweet]
  } deriving Show

tweet1 :: Tweet
tweet1 = Tweet "Hello Haskell!" 10
          [ Tweet "Nice post!" 5 []
          , Tweet "Great read!" 3
              [ Tweet "Agreed!" 2 [] ]
          ]


-------------------------------------------------------------
-- HC9T7: Engagement Function for Tweets
-------------------------------------------------------------
engagement :: Tweet -> Int
engagement (Tweet _ l cs) = l + sum (map engagement cs)


-------------------------------------------------------------
-- HC9T8: Recursive Sequence Data Type
-------------------------------------------------------------
data Sequence a = Nil | Node a (Sequence a) deriving Show

seq1 :: Sequence Int
seq1 = Node 1 (Node 2 (Node 3 Nil))


-------------------------------------------------------------
-- HC9T9: Check for Element in a Sequence
-------------------------------------------------------------
elemSeq :: Eq a => a -> Sequence a -> Bool
elemSeq _ Nil = False
elemSeq x (Node y rest)
  | x == y    = True
  | otherwise = elemSeq x rest


-------------------------------------------------------------
-- HC9T10: Binary Search Tree Data Type
-------------------------------------------------------------
data BST a = EmptyTree | NodeBST a (BST a) (BST a) deriving Show

tree1 :: BST Int
tree1 = NodeBST 10
          (NodeBST 5 EmptyTree EmptyTree)
          (NodeBST 15 EmptyTree EmptyTree)


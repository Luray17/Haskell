module Main where

-- HC8T1: Type Synonyms and Basic Function
type Address = String
type Value = Int

generateTx :: Address -> Address -> Value -> String
generateTx fromAddr toAddr val =
  "From: " ++ fromAddr ++ ", To: " ++ toAddr ++ ", Value: " ++ show val


-- HC8T2: New Types and Data Constructors
data PaymentMethod = Cash | Card | Cryptocurrency deriving Show

data Person1 = Person1 String (String, Int) PaymentMethod deriving Show

bob :: Person1
bob = Person1 "Bob" ("123 Main Street", 42) Cash


-- HC8T3: Algebraic Data Types and Functions
data Shape = Circle Float | Rectangle Float Float deriving Show

area :: Shape -> Float
area (Circle r) = pi * r * r
area (Rectangle w h) = w * h

circleArea :: Float
circleArea = area (Circle 5)

rectangleArea :: Float
rectangleArea = area (Rectangle 10 5)


-- HC8T4: Record Syntax for Employee
data Employee = Employee
  { name :: String
  , experienceInYears :: Float
  } deriving Show

richard :: Employee
richard = Employee { name = "Richard", experienceInYears = 7.5 }


-- HC8T5: Record Syntax for Person
data Person = Person
  { personName :: String
  , age :: Int
  , isEmployed :: Bool
  } deriving Show

person1 :: Person
person1 = Person { personName = "Alice", age = 30, isEmployed = True }

person2 :: Person
person2 = Person { personName = "Eve", age = 25, isEmployed = False }


-- HC8T6: Record Syntax for Shape Variants
data Shape2
  = Circle2 { center :: (Float, Float), color :: String, radius :: Float }
  | Rectangle2 { width :: Float, height :: Float, color :: String }
  deriving Show

circleShape :: Shape2
circleShape = Circle2 { center = (0, 0), color = "Red", radius = 5 }

rectangleShape :: Shape2
rectangleShape = Rectangle2 { width = 10, height = 5, color = "Blue" }


-- HC8T7: Data Types and Describing Animals
data Animal = Dog String | Cat String deriving Show

describeAnimal :: Animal -> String
describeAnimal (Dog name) = "This is a dog named " ++ name
describeAnimal (Cat name) = "This is a cat named " ++ name

dog1 :: Animal
dog1 = Dog "Buddy"

cat1 :: Animal
cat1 = Cat "Whiskers"


-- HC8T8: Type Synonyms and Greeting Function
type Name = String
type Age = Int

greet :: Name -> Age -> String
greet name age = "Hello, " ++ name ++ "! You are " ++ show age ++ " years old."


-- HC8T9: Record Type and Transaction Function
data Transaction = Transaction
  { from :: Address
  , to :: Address
  , amount :: Value
  , transactionId :: String
  } deriving Show

createTransaction :: Address -> Address -> Value -> String
createTransaction fromAddr toAddr val =
  let tx = Transaction { from = fromAddr, to = toAddr, amount = val, transactionId = "TX12345" }
  in transactionId tx


-- HC8T10: Deriving Show for Book
data Book = Book
  { title :: String
  , author :: String
  , year :: Int
  } deriving Show

book1 :: Book
book1 = Book { title = "Learn You a Haskell", author = "Miran Lipovaƒça", year = 2011 }


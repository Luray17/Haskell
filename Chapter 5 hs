module Main where

-- HC5T1: Using applyTwice
applyThrice :: (Int -> Int) -> Int -> Int
applyThrice f x = f (f (f x))

-- HC5T2: Filtering Odd Numbers
oddNumbers :: [Int]
oddNumbers = filter odd [1..30]

-- HC5T3: Checking for Uppercase Letters
import Data.Char (isUpper)

anyUppercaseStart :: [String] -> Bool
anyUppercaseStart = any (\word -> not (null word) && isUpper (head word))

-- HC5T4: Using Lambda Functions
biggerThan10 :: Int -> Bool
biggerThan10 = (\x -> x > 10)

-- HC5T5: Partial Application
multiplyByFive :: Int -> Int
multiplyByFive = (*5)

-- HC5T6: Function Composition
squaresOfEvens :: [Int] -> [Int]
squaresOfEvens = filter even . map (^2)

-- HC5T7: The $ Operator
result :: Int
result = sum $ map (*2) $ filter (>3) [1..10]

-- HC5T8: Point-Free Style
addFive :: Int -> Int
addFive = (+5)

-- HC5T9: Higher-Order Function to Transform a List
transformList :: (a -> a) -> [a] -> [a]
transformList f = map (f . f)

-- HC5T10: Combining Higher-Order Functions
anySquareGreaterThan50 :: [Int] -> Bool
anySquareGreaterThan50 = any (>50) . map (^2)

-- main for testing
main :: IO ()
main = do
    putStrLn "HC5T1: applyThrice (+1) 5"
    print (applyThrice (+1) 5)

    putStrLn "\nHC5T2: Odd numbers from 1 to 30"
    print oddNumbers

    putStrLn "\nHC5T3: Any uppercase start in [\"apple\", \"Banana\", \"cherry\"]"
    print (anyUppercaseStart ["apple", "Banana", "cherry"])

    putStrLn "\nHC5T4: biggerThan10 15"
    print (biggerThan10 15)

    putStrLn "\nHC5T5: multiplyByFive 7"
    print (multiplyByFive 7)

    putStrLn "\nHC5T6: squaresOfEvens [1..10]"
    print (squaresOfEvens [1..10])

    putStrLn "\nHC5T7: result"
    print result

    putStrLn "\nHC5T8: addFive 20"
    print (addFive 20)

    putStrLn "\nHC5T9: transformList (+1) [1,2,3,4]"
    print (transformList (+1) [1,2,3,4])

    putStrLn "\nHC5T10: anySquareGreaterThan50 [3,6,8]"
    print (anySquareGreaterThan50 [3,6,8])

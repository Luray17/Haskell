-- Haskell Chapter 7: Type Classes and Custom Types
-- Combined Tasks HC7T1 to HC7T10

module Main where

-- ✅ HC7T1: Implement an Eq Instance for a Custom Data Type
data Color = Red | Green | Blue
    deriving (Show, Enum, Bounded)

instance Eq Color where
    Red   == Red   = True
    Green == Green = True
    Blue  == Blue  = True
    _     == _     = False


-- ✅ HC7T2: Implement an Ord Instance for a Custom Data Type
instance Ord Color where
    compare Red Green   = LT
    compare Red Blue    = LT
    compare Green Blue  = LT
    compare Green Red   = GT
    compare Blue Red    = GT
    compare Blue Green  = GT
    compare _ _         = EQ


-- ✅ HC7T3: Function Using Multiple Constraints
compareValues :: (Eq a, Ord a) => a -> a -> a
compareValues a b
    | a >= b    = a
    | otherwise = b


-- ✅ HC7T4: Custom Type with Show and Read
data Shape = Circle Double | Rectangle Double Double
    deriving (Show, Read, Eq, Ord)


-- ✅ HC7T5: Function with Num Constraint
squareArea :: (Num a) => a -> a
squareArea side = side * side


-- ✅ HC7T6: Using Floating Type Classes
circleCircumference :: (Floating a) => a -> a
circleCircumference r = 2 * pi * r


-- ✅ HC7T7: Bounded and Enum
nextColor :: Color -> Color
nextColor c
    | c == maxBound = minBound
    | otherwise     = succ c


-- ✅ HC7T8: Parse a Value from a String Using Read
parseShape :: String -> Maybe Shape
parseShape str = case reads str of
    [(s, "")] -> Just s
    _         -> Nothing


-- ✅ HC7T9: Type Class with Multiple Instances
class Describable a where
    describe :: a -> String

instance Describable Bool where
    describe True  = "This is True."
    describe False = "This is False."

instance Describable Shape where
    describe (Circle r) = "A circle with radius " ++ show r
    describe (Rectangle w h) = "A rectangle " ++ show w ++ "x" ++ show h


-- ✅ HC7T10: Function with Multiple Type Class Constraints
describeAndCompare :: (Describable a, Ord a) => a -> a -> String
describeAndCompare a b
    | a >= b    = "Larger: " ++ describe a
    | otherwise = "Larger: " ++ describe b


-- ✅ Main to run all tasks
main :: IO ()
main = do
    putStrLn "=== Haskell Chapter 7 Practical Tasks ===\n"

    -- Task 1
    putStrLn "HC7T1: Eq instance for Color"
    print (Red == Blue)
    print (Green == Green)
    putStrLn ""

    -- Task 2
    putStrLn "HC7T2: Ord instance for Color"
    print (Red < Green)
    print (Blue > Red)
    putStrLn ""

    -- Task 3
    putStrLn "HC7T3: compareValues"
    print (compareValues 10 5)
    print (compareValues 'a' 'z')
    putStrLn ""

    -- Task 4
    putStrLn "HC7T4: Show and Read for Shape"
    let s1 = Circle 4.5
    let s2 = Rectangle 3 6
    print s1
    print s2
    print (read "Circle 4.5" :: Shape)
    putStrLn ""

    -- Task 5
    putStrLn "HC7T5: squareArea"
    print (squareArea 5)
    print (squareArea 2.5)
    putStrLn ""

    -- Task 6
    putStrLn "HC7T6: circleCircumference"
    print (circleCircumference 5)
    putStrLn ""

    -- Task 7
    putStrLn "HC7T7: nextColor"
    print (nextColor Red)
    print (nextColor Green)
    print (nextColor Blue)
    putStrLn ""

    -- Task 8
    putStrLn "HC7T8: parseShape"
    print (parseShape "Circle 3.5")
    print (parseShape "InvalidShape")
    putStrLn ""

    -- Task 9
    putStrLn "HC7T9: Describable Instances"
    print (describe True)
    print (describe (Rectangle 4 5))
    putStrLn ""

    -- Task 10
    putStrLn "HC7T10: describeAndCompare"
    print (describeAndCompare True False)
    print (describeAndCompare (Rectangle 3 5) (Rectangle 2 2))
    putStrLn ""

    putStrLn "=== End of Chapter 7 Tasks ==="
